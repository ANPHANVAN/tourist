<!-- Bootstrap Icons -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
<style>
body {
    background-color: #f0f2f5;
    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen, Ubuntu, sans-serif;
}
.chat-container {
    height: 93vh;
    display: flex;
    overflow: hidden;
}
.sidebar {
    background-color: #fff;
    border-right: 1px solid #ddd;
    height: 100%;
    overflow-y: auto;
}
.conversation-list .list-group-item {
    border: none;
    cursor: pointer;
    transition: background-color 0.2s;
}
.conversation-list .list-group-item:hover {
    background-color: #f0f2f5;
}
.chat-area {
    flex-grow: 1;
    display: flex;
    flex-direction: column;
    background-color: #e9ecef;
}
.chat-header {
    background-color: #fff;
    border-bottom: 1px solid #ddd;
    padding: 10px;
}
.chat-messages {
    flex-grow: 1;
    overflow-y: auto;
    padding: 20px;
    background-color: #fff;
}
.message {
    max-width: 60%;
    margin-bottom: 10px;
    padding: 8px 12px;
    border-radius: 10px;
}
.message.sent {
    background-color: #0084ff;
    color: #fff;
    margin-left: auto;
}
.message.received {
    background-color: #e9ecef;
    color: #000;
}
.input-group {
    padding: 10px;
    background-color: #fff;
    border-top: 1px solid #ddd;
}
.all-users .list-group-item {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 8px;
    transition: background-color 0.2s;
}
.all-users .list-group-item:hover {
    background-color: #f0f2f5;
}
.online-dot {
    width: 10px;
    height: 10px;
    background-color: #42b72a;
    border-radius: 50%;
    margin-right: 8px;
}
.loading {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100%;
}
</style>

<div class="chat-container">
<!-- Cột 1: Danh sách cuộc trò chuyện -->
<div class="sidebar col-md-3 p-0">
    <div class="p-3 border-bottom">
    <h5 class="fw-bold">Chats</h5>
    </div>
    <ul class="list-group list-group-flush conversation-list" id="conversationList">
    <!-- Danh sách cuộc trò chuyện sẽ được fetch và hiển thị ở đây -->
    </ul>
</div>

<!-- Cột 2: Ô trò chuyện -->
<div class="chat-area col-md-6 p-0">
    <div class="chat-header d-flex align-items-center">
    <img src="" alt="Avatar" class="rounded-circle me-2" style="width: 40px; height: 40px; object-fit: cover;" id="chatAvatar">
    <div>
        <h6 class="mb-0 fw-bold" id="chatName">Select a conversation</h6>
        <small class="text-muted" id="chatStatus">Click a chat to start</small>
    </div>
    </div>
    <div class="chat-messages" id="chatMessages">
    <!-- Tin nhắn sẽ được hiển thị ở đây -->
    </div>
    <div class="input-group">
    <input type="text" class="form-control" id="messageInput" placeholder="Type a message...">
    <button class="btn btn-primary" id="sendBtn"><i class="bi bi-send-fill"></i></button>
    </div>
</div>

<!-- Cột 3: Tất cả user -->
<div class="sidebar col-md-3 p-0">
    <div class="p-2 border-bottom">
    <!-- <h5 class="fw-bold">All Users</h5> -->
    <div class="mb-2">
        <input type="text" id="search-input" class="form-control" placeholder="Search Users ...">
    </div>
    </div>
    <ul class="list-group list-group-flush all-users" id="allUsers">
    <!-- Danh sách tất cả user sẽ được hiển thị ở đây -->
    </ul>
</div>
</div>

<!-- Loading Spinner -->
<div id="loading" class="loading position-fixed bg-white w-100 h-100" style="z-index: 1000; opacity: 0.8;">
<div class="spinner-border text-primary" role="status">
    <span class="visually-hidden">Loading...</span>
</div>
</div>

<script>
    // DOM Elements
    const conversationList = document.getElementById('conversationList');
    const chatMessages = document.getElementById('chatMessages');
    const chatName = document.getElementById('chatName');
    const chatAvatar = document.getElementById('chatAvatar');
    const chatStatus = document.getElementById('chatStatus');
    const messageInput = document.getElementById('messageInput');
    const sendBtn = document.getElementById('sendBtn');
    const allUsers = document.getElementById('allUsers');
    const loading = document.getElementById('loading');
    const searchInput = document.getElementById("search-input");
    const listUsers = document.querySelectorAll(".list-users");
    
    function searchUser() {
        searchInput.addEventListener("input", function () {
            const query = this.value.toLowerCase();
            const listUsers = document.querySelectorAll(".list-users"); // Lấy lại mỗi lần
            console.log(listUsers)
            listUsers.forEach(listUser => {
                const text = listUser.outerText.toLowerCase();
                console.log("text.includes(query)",text.includes(query))
                if (text.includes(query)) {
                    listUser.classList.remove("d-none");
                } else {
                    listUser.classList.add("d-none");
                }
            });
        });
    }

    
    const socket = io('<%=FINAL_HOST%>');
let selectedConversationId = null;
let currentUserId = `<%= UserId %>`;
let currentMessages = null

socket.on('connect', () => {
    fetchData(); // Fetch dữ liệu sau khi có userId
    console.log('Connected to Socket.IO with userId:', currentUserId);
    socket.emit('sendUserInfo', { userId: currentUserId });
});


// Show loading
function showLoading(show) {
    loading.style.display = show ? 'block' : 'none';
}

// Render conversations
function renderConversations(conversations) {
    conversationList.innerHTML = '';
    conversations.forEach(conv => {
    const otherUser = conv.user.find(u => u._id !== currentUserId);
    if (otherUser) {
        const li = document.createElement('li');
        li.className = 'list-group-item d-flex align-items-center';
        li.innerHTML = `
        <img src="${otherUser.avatar}" alt="${otherUser.fullname}" class="rounded-circle me-2" style="width: 40px; height: 40px; object-fit: cover;">
        <div>
            <div class="fw-bold">${otherUser.fullname}</div>
            <small class="text-muted">${conv.message.sender.fullname}: </small>
            <small class="text-muted">
            ${conv.message ? (conv.message.text.length > 20 ? conv.message.text.slice(0, 20) + '...' : conv.message.text) : 'No messages yet'}
            </small>
            <br><small class="text-muted">${new Date(conv.updatedAt).toLocaleString()}</small>
        </div>
        `;
        li.addEventListener('click', () => selectConversation(conv._id, otherUser));
        conversationList.appendChild(li);
    }
    });
}

// Render messages
function renderMessages(messages) {
    chatMessages.innerHTML = '';
    messages.forEach(msg => {
    const isSent = msg.sender._id === currentUserId;
    const div = document.createElement('div');
    div.className = `message ${isSent ? 'sent' : 'received'} mb-2`;
    div.innerHTML = `
        <small class="text-muted">${new Date(msg.createdAt).toLocaleString()}</small><br>
        ${msg.text}
    `;
    chatMessages.appendChild(div);
    });
    chatMessages.scrollTop = chatMessages.scrollHeight;
}

// Render all users
function renderAllUsers(users) {
    allUsers.innerHTML = '';
    users.forEach(user => {
        if (user._id !== currentUserId) {
            const li = document.createElement('li');
            li.className = 'list-group-item d-flex align-items-center list-users';
            li.innerHTML = `
            <div class="d-flex align-items-center">
                ${user.online_status ? '<i class="bi bi-circle-fill text-success"></i>' : '<i class="bi bi-circle"></i> '}
                <img src="${user.avatar}" alt="${user.fullname}" class="rounded-circle me-2" style="width: 30px; height: 30px; object-fit: cover;">
                <span class="user-full-name">${user.fullname}</span>
            </div>
            <button class="btn btn-sm btn-primary ms-auto" onclick="buttonNavigation('${user._id}')">
                <i class="bi bi-chat-left-text-fill"></i>
            </button>
            `;
            allUsers.appendChild(li);
        }
        
    });
}

// Select conversation
async function selectConversation(conversationId, otherUser) {
    selectedConversationId = conversationId;
    chatName.textContent = otherUser.fullname;
    chatAvatar.src = otherUser.avatar;
    if (otherUser.online_status) {
        chatStatus.innerHTML = `<i class="bi bi-circle-fill text-success"></i>  Online`;
    } else {
        chatStatus.innerHTML = `<i class="bi bi-circle"></i></i>  Offline`;
    }
    try {
    const response = await fetch(`/chat/api/get-message/${conversationId}`);
    const messages = await response.json();
    renderMessages(messages);
    } catch (error) {
    console.error('Error fetching messages:', error);
    renderMessages([]);
    }
}


async function buttonNavigation(otherUserId) {
    let matchedConversation = null;
    let users = [currentUserId, otherUserId].sort()
    const conversationsResponse = await fetch('/chat/api/get-all-conversation');
    const conversations = await conversationsResponse.json();
    conversations.forEach(conversation => {
        const convUserIds = conversation.user.map(u=>u._id).sort()

        const isSame = users.length === convUserIds.length &&
        users.every((id, idx) => id === convUserIds[idx]);

        if (isSame) {
            matchedConversation = conversation;
        }
    })

    if (matchedConversation) {
        const otherUser = await fetchOneUser(otherUserId)
        selectConversation(matchedConversation._id, otherUser.user);
    } else {
        createConversation(otherUserId);
    }
}

// Create new conversation
async function createConversation(otherUserId) {
    try {
    const response = await fetch('/chat/api/create-conversation', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ users: [currentUserId, otherUserId] }),
    });
    const newConversation = await response.json();
    fetchConversations();
    const otherUser = newConversation.user.find(u => u._id !== currentUserId);
    selectConversation(newConversation._id, otherUser);
    } catch (error) {
    console.error('Error creating conversation:', error);
    alert('Failed to create conversation.');
    }
}

// Send message
function sendMessage() {
    const content = messageInput.value.trim();
    if (content && selectedConversationId) {
    const message = {
        conversation: selectedConversationId,
        sender: currentUserId,
        text: content,
    };
    socket.emit('sendMessage', { conversationId: selectedConversationId, message });
    messageInput.value = '';
    }
}
// Socket.IO events
socket.on('receiveMessage', async (data) => {
    const { conversationId, message } = data;
    if (conversationId === selectedConversationId) {
        socket.emit('takeMessageData', (conversationId) )

        socket.on('receiveMessageData', (messages)=>{
            renderMessages(messages);
            fetchConversations()
        });
    }
});


socket.on('updateAllUsers', (users) => {
    renderAllUsers(users);
});

socket.on('updateAllConversation', () => {
    fetchConversations()
});

socket.on('error', (msg) => {
    console.error('Socket error:', msg);
    alert('Authentication failed. Please login again.');
});

// Event listeners
sendBtn.addEventListener('click', sendMessage);
messageInput.addEventListener('keypress', (e) => {
    if (e.key === 'Enter') sendMessage();
});

// Fetch conversations
async function fetchConversations() {
    try {
    const response = await fetch('/chat/api/get-all-conversation');
    const conversations = await response.json();
    renderConversations(conversations);
    } catch (error) {
    console.error('Error fetching conversations:', error);
    }
}

// Fetch all users
async function fetchAllUsers() {
    try {
    const response = await fetch('/api/user/all-user');
    const data = await response.json();
    renderAllUsers(data.users);
    } catch (error) {
    console.error('Error fetching users:', error);
    }
}

// Initialize
async function fetchData() {
    if (!currentUserId) return; // Chờ xác thực trước khi fetch
    showLoading(true);
    await Promise.all([fetchConversations(), fetchAllUsers()]);
    showLoading(false);
    searchUser()
}
</script>