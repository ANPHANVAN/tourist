services:

  consumer:
    build:
      context: ./consumer
      dockerfile: Dockerfile
    container_name: tourist-consumer-1
    networks:
      - app-network
    volumes:
      - ./consumer:/tourist_project
    environment:
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - MONGO_LINK=${MONGO_LINK}
      # - REDIS_LINK=${REDIS_LINK}
      - RABBIT_LINK_CONNECT=${RABBIT_LINK_CONNECT}
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      # redis:
      #   condition: service_healthy
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
      
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: tourist-rabbitmq-1
    ports:
      - "15672:15672" # RabbitMQ management UI
      - "5672:5672"   # RabbitMQ AMQP protocol
    networks:
      - app-network
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    expose:
      - "5672"
    environment:
      - RABBIT_LINK_CONNECT=${RABBIT_LINK_CONNECT}
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres:
    image: postgres:15
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./.database/postgres_backup/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql # link my scripts sql run on first start
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network
    expose:
      - "5432"

  mongodb:
    image: mongo:7.0
    volumes:
      - mongo-data:/data/db
      - ./.database/mongo_backup:/data/backup  # take backup files
    healthcheck:
      test: ["CMD-SHELL", "mongosh", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network
    expose:
      - "27017"
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}

  # redis:
  #   image: redis:7.2
  #   container_name: tourist-redis-1
  #   volumes:
  #     - redis-data:/data
  #   expose:
  #     - "6379"
  #   networks:
  #     - app-network
  #   restart: unless-stopped
  #   healthcheck:
  #     test: ["CMD", "redis-cli", "ping"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  #   logging:
  #     driver: "json-file"
  #     options:
  #       max-size: "10m"
  #       max-file: "3"


  express:
    build:
      context: ./express/tourist_project
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=development
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - MONGO_HOST=mongodb
      - MONGO_LINK=${MONGO_LINK}
      # - REDIS_HOST=${REDIS_HOST}
      # - REDIS_PORT=${REDIS_PORT}
      # - REDIS_LINK=${REDIS_LINK}
      - HASH_SALT=${HASH_SALT}
      - JWT_SECRET=${JWT_SECRET}
      - RABBIT_LINK_CONNECT=${RABBIT_LINK_CONNECT}
      - FINAL_HOST=${FINAL_HOST}
    expose:
      - "3000"
    volumes:
      - ./express/tourist_project:/tourist_project
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      # redis:
      #   condition: service_healthy
    networks:
      - app-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    container_name: tourist-express-1

  flask:
    build:
      context: ./flask/tourist_project
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=development
      - PYTHONUNBUFFERED=1
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - MONGO_HOST=mongodb
      - MONGO_LINK=${MONGO_LINK}
      # - REDIS_HOST=${REDIS_HOST}
      # - REDIS_PORT=${REDIS_PORT}
      # - REDIS_LINK=${REDIS_LINK}
    volumes:
      - ./flask/tourist_project:/tourist_project
    expose:
      - "5000"
    ports:
      - "5000:5000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network
    container_name: tourist-flask-1
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5000/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
      
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  nginx:
    container_name: tourist-nginx-1
    image: nginx:1.27
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./express/tourist_project/src/public:/public:ro
    depends_on:
      express:
        condition: service_healthy
      flask:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 10s
      timeout: 5s 
      retries: 5
    networks:
      - app-network
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

networks:
  app-network:
    driver: bridge

volumes:
  postgres-data:
  mongo-data:
  rabbitmq-data:
  # redis-data: